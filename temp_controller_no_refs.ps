%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Thu Sep 20 20:04:57 2012
%%Title: /home/ed/sparktalk/temp_controller_no_refs.sch
%%Author: (null)
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
6455 499 translate 90 rotate
0.474895 0.474895 scale
-37300 -44210 translate
gsave
40700 52400 40700 52600 10 line
40550 52600 40850 52600 10 line
gsave
false false false false 208.000000 [(+12V) ] 0 40575 52650 144.444443 text
grestore
grestore
gsave
gsave
false false false false 208.000000 [(IN) ] 0 41100 51900 144.444443 text
grestore
gsave
false false false false 208.000000 [(OUT) ] 0 41648 51900 144.444443 text
grestore
gsave
false false false false 208.000000 [(7805) ] 0 41600 51400 144.444443 text
grestore
41000 51600 42000 51600 10 line
42000 51600 42000 52200 10 line
42000 52200 41000 52200 10 line
41000 52200 41000 51600 10 line
gsave
false false false false 208.000000 [(GND) ] 0 41356 51701 144.444443 text
grestore
41000 51900 40700 51900 10 line
gsave
false false false false 208.000000 [(1) ] 0 40800 51950 144.444443 text
grestore
41500 51300 41500 51600 10 line
gsave
false false false false 208.000000 [(2) ] 0 41400 51400 144.444443 text
grestore
42000 51900 42300 51900 10 line
gsave
false false false false 208.000000 [(3) ] 0 42130 51950 144.444443 text
grestore
grestore
gsave
false true false false 260.000000 [(U1) ] 0 42100 52300 180.555557 text
grestore
gsave
42300 52400 42300 52600 10 line
42150 52600 42450 52600 10 line
gsave
false false false false 208.000000 [(+5V) ] 0 42175 52650 144.444443 text
grestore
grestore
40700 52400 40700 51900 10 line
42300 52400 42300 51900 10 line
gsave
40700 51900 40700 51700 10 line
gsave
false true false false 208.000000 [(1) ] 270 40750 51750 144.444443 text
grestore
40700 51000 40700 51200 10 line
gsave
false false false false 208.000000 [(2) ] 270 40750 51150 144.444443 text
grestore
40900 51500 40500 51500 10 line
40700 51200 40700 51400 10 line
40700 51500 40700 51700 10 line
40700 50700 700 75 105 10 darc
40900 51611 40800 51611 10 line
40849 51560 40849 51660 10 line
grestore
gsave
false false false false 260.000000 [(C1) ] 0 40200 51400 180.555557 text
grestore
gsave
42300 51900 42300 51700 10 line
gsave
false true false false 208.000000 [(1) ] 270 42350 51750 144.444443 text
grestore
42300 51000 42300 51200 10 line
gsave
false false false false 208.000000 [(2) ] 270 42350 51150 144.444443 text
grestore
42500 51500 42100 51500 10 line
42300 51200 42300 51400 10 line
42300 51500 42300 51700 10 line
42300 50700 700 75 105 10 darc
42500 51611 42400 51611 10 line
42449 51560 42449 51660 10 line
grestore
gsave
false false false false 260.000000 [(C2) ] 0 42500 51400 180.555557 text
grestore
gsave
false false false false 260.000000 [(1u) ] 0 42500 51200 180.555557 text
grestore
gsave
41500 50800 41500 51000 10 line
41400 50800 41600 50800 10 line
41455 50750 41545 50750 10 line
41480 50710 41520 50710 10 line
newpath
41500 51000
25
0 360 arc
fill
newpath
41500 51000
25
0 360 arc
fill
grestore
40700 51000 42300 51000 10 line
41500 51300 41500 51000 10 line
40100 50600 42900 50600 10 line
42900 50600 42900 53200 10 line
42900 53200 40100 53200 10 line
40100 53200 40100 50600 10 line
gsave
false false false false 260.000000 [(Power Supply) ] 0 40500 52900 180.555557 text
grestore
gsave
47700 52300 47700 51500 10 line
47700 52300 48300 51900 10 line
48300 51900 47700 51500 10 line
47800 52150 47800 52050 10 line
47750 52100 47850 52100 10 line
47750 51700 47850 51700 10 line
47500 52100 47700 52100 10 line
gsave
false true false false 208.000000 [(1) ] 0 47650 52150 144.444443 text
grestore
47500 51700 47700 51700 10 line
gsave
false true false false 208.000000 [(2) ] 0 47650 51750 144.444443 text
grestore
48300 51900 48500 51900 10 line
gsave
false false false false 208.000000 [(5) ] 0 48300 51950 144.444443 text
grestore
48000 52100 48000 52300 10 line
gsave
false false false false 208.000000 [(3) ] 0 48050 52100 144.444443 text
grestore
48000 51700 48000 51500 10 line
gsave
false false false false 208.000000 [(4) ] 0 48050 51600 144.444443 text
grestore
grestore
gsave
false false false false 260.000000 [(U4) ] 0 48200 52100 180.555557 text
grestore
gsave
41900 48100 41900 47300 10 line
41900 48100 42500 47700 10 line
42500 47700 41900 47300 10 line
42000 47950 42000 47850 10 line
41950 47900 42050 47900 10 line
41950 47500 42050 47500 10 line
41700 47900 41900 47900 10 line
gsave
false true false false 208.000000 [(1) ] 0 41850 47950 144.444443 text
grestore
41700 47500 41900 47500 10 line
gsave
false true false false 208.000000 [(2) ] 0 41850 47550 144.444443 text
grestore
42500 47700 42700 47700 10 line
gsave
false false false false 208.000000 [(5) ] 0 42500 47750 144.444443 text
grestore
42200 47900 42200 48100 10 line
gsave
false false false false 208.000000 [(3) ] 0 42250 47900 144.444443 text
grestore
42200 47500 42200 47300 10 line
gsave
false false false false 208.000000 [(4) ] 0 42250 47400 144.444443 text
grestore
grestore
gsave
false false false false 260.000000 [(U3) ] 0 42400 47900 180.555557 text
grestore
gsave
48000 52300 48000 52500 10 line
47850 52500 48150 52500 10 line
gsave
false false false false 208.000000 [(+12V) ] 0 47875 52550 144.444443 text
grestore
grestore
gsave
42200 48100 42200 48300 10 line
42050 48300 42350 48300 10 line
gsave
false false false false 208.000000 [(+12V) ] 0 42075 48350 144.444443 text
grestore
grestore
gsave
38200 44800 39400 44800 10 line
39400 44800 39400 45900 10 line
39400 45900 38200 45900 10 line
38200 45900 38200 44800 10 line
38800 46200 38800 45900 10 line
gsave
false false false true 260.000000 [(VDD) ] 0 38605 45800 180.555557 text
grestore
gsave
false true false true 260.000000 [(2) ] 0 39005 46150 180.555557 text
grestore
38800 44500 38800 44800 10 line
gsave
false true false true 260.000000 [(GND) ] 0 38995 45000 180.555557 text
grestore
gsave
false false false true 260.000000 [(3) ] 0 38895 44650 180.555557 text
grestore
39700 45300 39400 45300 10 line
gsave
false true false false 260.000000 [(VOUT) ] 0 39345 45295 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 39495 45345 180.555557 text
grestore
gsave
false false false false 260.000000 [(MCP9700) ] 0 37950 45950 180.555557 text
grestore
grestore
gsave
false false false false 260.000000 [(U2) ] 0 39200 45995 180.555557 text
grestore
gsave
38800 46200 38800 46400 10 line
38650 46400 38950 46400 10 line
gsave
false false false false 208.000000 [(+5V) ] 0 38675 46450 144.444443 text
grestore
grestore
gsave
38800 44300 38800 44500 10 line
38700 44300 38900 44300 10 line
38755 44250 38845 44250 10 line
38780 44210 38820 44210 10 line
grestore
gsave
39150 47900 39300 47900 10 line
gsave
false true false false 208.000000 [(2) ] 270 39200 47800 144.444443 text
grestore
38900 47900 39001 47848 10 line
38901 47901 39002 47953 10 line
38900 48000 38700 47900 10 line
38700 47900 38900 47800 10 line
38900 47800 38700 47700 10 line
38700 47700 38900 47600 10 line
38900 48000 38700 48100 10 line
38700 48100 38800 48150 10 line
38800 48300 38800 48150 10 line
gsave
false true false false 208.000000 [(3) ] 270 38650 48200 144.444443 text
grestore
gsave
false true false false 260.000000 [(cw) ] 270 38900 48100 180.555557 text
grestore
38800 47400 38800 47552 10 line
gsave
false true false false 208.000000 [(1) ] 270 38650 47500 144.444443 text
grestore
gsave
false true false false 260.000000 [(ccw) ] 270 38900 47400 180.555557 text
grestore
38900 47601 38800 47550 10 line
38900 47900 39150 47900 10 line
grestore
gsave
false false false true 260.000000 [(R1) ] 0 38300 48000 180.555557 text
grestore
gsave
false false false false 260.000000 [(10k) ] 0 38300 47700 180.555557 text
grestore
gsave
38800 48300 38800 48500 10 line
38650 48500 38950 48500 10 line
gsave
false false false false 208.000000 [(+5V) ] 0 38675 48550 144.444443 text
grestore
grestore
gsave
38800 47200 38800 47400 10 line
38700 47200 38900 47200 10 line
38755 47150 38845 47150 10 line
38780 47110 38820 47110 10 line
grestore
gsave
40400 46800 40300 46600 10 line
40300 46600 40200 46800 10 line
40200 46800 40100 46600 10 line
40100 46600 40000 46800 10 line
40400 46800 40500 46600 10 line
40500 46600 40550 46700 10 line
40700 46700 40550 46700 10 line
39800 46700 39952 46700 10 line
40001 46800 39950 46700 10 line
grestore
gsave
false false false false 260.000000 [(R2) ] 0 40000 47100 180.555557 text
grestore
gsave
false false false false 260.000000 [(10k) ] 0 40000 46900 180.555557 text
grestore
gsave
42100 46400 42200 46600 10 line
42200 46600 42300 46400 10 line
42300 46400 42400 46600 10 line
42400 46600 42500 46400 10 line
42100 46400 42000 46600 10 line
42000 46600 41950 46500 10 line
41800 46500 41950 46500 10 line
42700 46500 42548 46500 10 line
42499 46400 42550 46500 10 line
grestore
gsave
false true false true 260.000000 [(R4) ] 0 42300 46300 180.555557 text
grestore
gsave
false false false false 260.000000 [(10k) ] 0 42000 46000 180.555557 text
grestore
40700 46700 41300 46700 10 line
41300 46500 41300 47500 10 line
41300 47500 41700 47500 10 line
41800 46500 41300 46500 10 line
42700 46500 42700 47700 10 line
41700 47900 39300 47900 10 line
42700 47700 46300 47700 10 line
gsave
false false false false 260.000000 [(Temperature Error) ] 0 43200 47800 180.555557 text
grestore
gsave
48000 51500 48000 51300 10 line
48150 51300 47850 51300 10 line
gsave
false true false true 208.000000 [(-12V) ] 0 48125 51250 144.444443 text
grestore
grestore
gsave
42200 47300 42200 47100 10 line
42350 47100 42050 47100 10 line
gsave
false true false true 208.000000 [(-12V) ] 0 42325 47050 144.444443 text
grestore
grestore
gsave
47400 48300 47400 47500 10 line
47400 48300 48000 47900 10 line
48000 47900 47400 47500 10 line
47500 48150 47500 48050 10 line
47450 48100 47550 48100 10 line
47450 47700 47550 47700 10 line
47200 48100 47400 48100 10 line
gsave
false true false false 208.000000 [(1) ] 0 47350 48150 144.444443 text
grestore
47200 47700 47400 47700 10 line
gsave
false true false false 208.000000 [(2) ] 0 47350 47750 144.444443 text
grestore
48000 47900 48200 47900 10 line
gsave
false false false false 208.000000 [(5) ] 0 48000 47950 144.444443 text
grestore
47700 48100 47700 48300 10 line
gsave
false false false false 208.000000 [(3) ] 0 47750 48100 144.444443 text
grestore
47700 47700 47700 47500 10 line
gsave
false false false false 208.000000 [(4) ] 0 47750 47600 144.444443 text
grestore
grestore
gsave
false false false false 260.000000 [(U5) ] 0 47900 48100 180.555557 text
grestore
gsave
47700 48300 47700 48500 10 line
47550 48500 47850 48500 10 line
gsave
false false false false 208.000000 [(+12V) ] 0 47575 48550 144.444443 text
grestore
grestore
gsave
47700 47500 47700 47300 10 line
47850 47300 47550 47300 10 line
gsave
false true false true 208.000000 [(-12V) ] 0 47825 47250 144.444443 text
grestore
grestore
gsave
47200 46300 47400 46300 10 line
48100 46300 47900 46300 10 line
47600 46500 47600 46100 10 line
47700 46500 47700 46100 10 line
47900 46300 47700 46300 10 line
47600 46300 47400 46300 10 line
newpath
47200 46300
25
0 360 arc
fill
newpath
47200 46300
25
0 360 arc
fill
grestore
gsave
false false false false 260.000000 [(C3) ] 0 47600 46800 180.555557 text
grestore
gsave
false false false false 260.000000 [(.47u) ] 0 47500 46600 180.555557 text
grestore
gsave
47500 45700 47600 45900 10 line
47600 45900 47700 45700 10 line
47700 45700 47800 45900 10 line
47800 45900 47900 45700 10 line
47500 45700 47400 45900 10 line
47400 45900 47350 45800 10 line
47200 45800 47350 45800 10 line
48100 45800 47948 45800 10 line
47899 45700 47950 45800 10 line
grestore
gsave
false true false true 260.000000 [(R7) ] 0 47800 45600 180.555557 text
grestore
gsave
false false false false 260.000000 [(10M) ] 0 47500 45300 180.555557 text
grestore
47200 45800 47200 47700 10 line
48200 45800 48200 47900 10 line
48200 46300 48100 46300 10 line
48100 45800 48200 45800 10 line
gsave
46600 47600 46700 47800 10 line
46700 47800 46800 47600 10 line
46800 47600 46900 47800 10 line
46900 47800 47000 47600 10 line
46600 47600 46500 47800 10 line
46500 47800 46450 47700 10 line
46300 47700 46450 47700 10 line
47200 47700 47048 47700 10 line
46999 47600 47050 47700 10 line
grestore
gsave
false true false true 260.000000 [(R6) ] 0 46900 47500 180.555557 text
grestore
gsave
false false false false 260.000000 [(10k) ] 0 46600 47200 180.555557 text
grestore
gsave
46900 48300 46900 48500 10 line
46800 48300 47000 48300 10 line
46855 48250 46945 48250 10 line
46880 48210 46920 48210 10 line
grestore
47200 48100 47200 48500 10 line
48200 47900 52300 47900 10 line
gsave
false false false false 260.000000 [(Integral Error) ] 0 49100 48000 180.555557 text
grestore
37300 46800 39600 46800 10 line
39600 46800 39600 49100 10 line
39600 49100 37300 49100 10 line
37300 49100 37300 46800 10 line
39700 45300 39800 45300 10 line
39800 45300 39800 46700 10 line
41000 46000 44800 46000 10 line
44800 46000 44800 49200 10 line
44800 49200 41000 49200 10 line
41000 49200 41000 46000 10 line
gsave
false false false false 260.000000 [(Error Amplifier \(Subtractor\)) ] 0 41200 48900 180.555557 text
grestore
gsave
false false false false 260.000000 [(Setpoint Knob) ] 0 37400 48900 180.555557 text
grestore
gsave
false false false false 260.000000 [(Error Integrator) (\(ki * I\)) ] 0 47200 49100 180.555557 text
grestore
gsave
false true false true 260.000000 [(Proportional Amplifier) (\(kp * e\)) ] 0 47900 53400 180.555557 text
grestore
46100 45100 50300 45100 10 line
50300 45100 50300 49800 10 line
50300 49800 46100 49800 10 line
46100 49800 46100 45100 10 line
46100 50200 50300 50200 10 line
50300 50200 50300 53500 10 line
50300 53500 46100 53500 10 line
46100 53500 46100 50200 10 line
gsave
53400 50400 53400 49600 10 line
53400 50400 54000 50000 10 line
54000 50000 53400 49600 10 line
53500 50250 53500 50150 10 line
53450 50200 53550 50200 10 line
53450 49800 53550 49800 10 line
53200 50200 53400 50200 10 line
gsave
false true false false 208.000000 [(1) ] 0 53350 50250 144.444443 text
grestore
53200 49800 53400 49800 10 line
gsave
false true false false 208.000000 [(2) ] 0 53350 49850 144.444443 text
grestore
54000 50000 54200 50000 10 line
gsave
false false false false 208.000000 [(5) ] 0 54000 50050 144.444443 text
grestore
53700 50200 53700 50400 10 line
gsave
false false false false 208.000000 [(3) ] 0 53750 50200 144.444443 text
grestore
53700 49800 53700 49600 10 line
gsave
false false false false 208.000000 [(4) ] 0 53750 49700 144.444443 text
grestore
grestore
gsave
false false false false 260.000000 [(U6) ] 0 53900 50200 180.555557 text
grestore
gsave
53700 50400 53700 50600 10 line
53550 50600 53850 50600 10 line
gsave
false false false false 208.000000 [(+12V) ] 0 53575 50650 144.444443 text
grestore
grestore
51400 47600 55700 47600 10 line
55700 47600 55700 51100 10 line
55700 51100 51400 51100 10 line
51400 51100 51400 47600 10 line
gsave
false true false true 260.000000 [(PI Summing Amp) ] 0 52900 51000 180.555557 text
grestore
gsave
46900 51600 47000 51800 10 line
47000 51800 47100 51600 10 line
47100 51600 47200 51800 10 line
47200 51800 47300 51600 10 line
46900 51600 46800 51800 10 line
46800 51800 46750 51700 10 line
46600 51700 46750 51700 10 line
47500 51700 47348 51700 10 line
47299 51600 47350 51700 10 line
grestore
gsave
false true false true 260.000000 [(R3) ] 0 47200 52100 180.555557 text
grestore
gsave
false false false false 260.000000 [(10k) ] 0 46900 51800 180.555557 text
grestore
gsave
47500 51900 47500 52100 10 line
47400 51900 47600 51900 10 line
47455 51850 47545 51850 10 line
47480 51810 47520 51810 10 line
grestore
gsave
52600 49700 52700 49900 10 line
52700 49900 52800 49700 10 line
52800 49700 52900 49900 10 line
52900 49900 53000 49700 10 line
52600 49700 52500 49900 10 line
52500 49900 52450 49800 10 line
52300 49800 52450 49800 10 line
53200 49800 53048 49800 10 line
52999 49700 53050 49800 10 line
grestore
gsave
false true false true 260.000000 [(R8) ] 0 52900 50300 180.555557 text
grestore
gsave
false false false false 260.000000 [(10k) ] 0 52600 50000 180.555557 text
grestore
gsave
52600 48900 52700 49100 10 line
52700 49100 52800 48900 10 line
52800 48900 52900 49100 10 line
52900 49100 53000 48900 10 line
52600 48900 52500 49100 10 line
52500 49100 52450 49000 10 line
52300 49000 52450 49000 10 line
53200 49000 53048 49000 10 line
52999 48900 53050 49000 10 line
grestore
gsave
false true false true 260.000000 [(R9) ] 0 53000 48800 180.555557 text
grestore
gsave
false false false false 260.000000 [(10k) ] 0 52700 48500 180.555557 text
grestore
gsave
53600 48900 53700 49100 10 line
53700 49100 53800 48900 10 line
53800 48900 53900 49100 10 line
53900 49100 54000 48900 10 line
53600 48900 53500 49100 10 line
53500 49100 53450 49000 10 line
53300 49000 53450 49000 10 line
54200 49000 54048 49000 10 line
53999 48900 54050 49000 10 line
grestore
gsave
false true false true 260.000000 [(R10) ] 0 53900 48800 180.555557 text
grestore
gsave
false false false false 260.000000 [(10k) ] 0 53600 48500 180.555557 text
grestore
53200 49800 53200 49000 10 line
53200 49000 53300 49000 10 line
54200 49000 54200 50000 10 line
gsave
53700 49400 53700 49600 10 line
53600 49400 53800 49400 10 line
53655 49350 53745 49350 10 line
53680 49310 53720 49310 10 line
grestore
gsave
53200 50000 53200 50200 10 line
53100 50000 53300 50000 10 line
53155 49950 53245 49950 10 line
53180 49910 53220 49910 10 line
grestore
46600 51700 45500 51700 10 line
45500 51700 45500 47700 10 line
52300 47900 52300 49000 10 line
52300 49800 51000 49800 10 line
51000 49800 51000 51900 10 line
51000 51900 48500 51900 10 line
47500 50500 47500 51700 10 line
48400 51000 48500 51000 10 line
48500 51000 48500 51900 10 line
gsave
57200 51100 57400 51000 10 line
57400 51000 57200 50900 10 line
57200 50900 57400 50800 10 line
57400 50800 57200 50700 10 line
57200 51100 57400 51200 10 line
57400 51200 57300 51250 10 line
57300 51400 57300 51250 10 line
57300 50500 57300 50652 10 line
57200 50701 57300 50650 10 line
grestore
gsave
false true false true 260.000000 [(HEATER) ] 0 58200 50900 180.555557 text
grestore
gsave
57300 49300 57300 49500 10 line
57200 49300 57400 49300 10 line
57255 49250 57345 49250 10 line
57280 49210 57320 49210 10 line
grestore
gsave
57300 51400 57300 51600 10 line
57150 51600 57450 51600 10 line
gsave
false false false false 208.000000 [(+12V) ] 0 57175 51650 144.444443 text
grestore
grestore
54200 50000 55900 50000 10 line
gsave
56200 49900 56300 50100 10 line
56300 50100 56400 49900 10 line
56400 49900 56500 50100 10 line
56500 50100 56600 49900 10 line
56200 49900 56100 50100 10 line
56100 50100 56050 50000 10 line
55900 50000 56050 50000 10 line
56800 50000 56648 50000 10 line
56599 49900 56650 50000 10 line
grestore
gsave
false true false true 260.000000 [(R11) ] 0 56500 50400 180.555557 text
grestore
gsave
false false false false 260.000000 [(1k) ] 0 56300 50100 180.555557 text
grestore
gsave
false false false false 260.000000 [(Heater and power driver circuit) ] 0 55900 52700 180.555557 text
grestore
gsave
57000 50300 57000 49700 10 line
56800 50000 57000 50000 10 line
gsave
false false false false 156.000000 [(B) ] 0 56900 50050 108.333336 text
grestore
57300 50500 57300 50300 10 line
gsave
false false false false 156.000000 [(C) ] 0 57200 50350 108.333336 text
grestore
57300 49700 57300 49500 10 line
gsave
false false false false 156.000000 [(E) ] 0 57200 49550 108.333336 text
grestore
57000 50150 57300 50300 10 line
57000 49850 57300 49700 10 line
10 setlinewidth
57203 49709 moveto 57301 49700 lineto 57231 49773 lineto 57225 49740 lineto closepath stroke
57203 49709 moveto 57301 49700 lineto 57231 49773 lineto 57225 49740 lineto closepath fill
grestore
gsave
false false false false 260.000000 [(Q1) ] 0 57400 50000 180.555557 text
grestore
gsave
47900 50650 47900 50500 10 line
gsave
false true false true 208.000000 [(2) ] 0 48000 50600 144.444443 text
grestore
47900 50900 47952 50799 10 line
47899 50899 47847 50798 10 line
47800 50900 47900 51100 10 line
47900 51100 48000 50900 10 line
48000 50900 48100 51100 10 line
48100 51100 48200 50900 10 line
47800 50900 47700 51100 10 line
47700 51100 47650 51000 10 line
47500 51000 47650 51000 10 line
gsave
false true false true 208.000000 [(3) ] 0 47600 51150 144.444443 text
grestore
gsave
false true false true 260.000000 [(cw) ] 0 47700 50900 180.555557 text
grestore
48400 51000 48248 51000 10 line
gsave
false true false true 208.000000 [(1) ] 0 48300 51150 144.444443 text
grestore
gsave
false true false true 260.000000 [(ccw) ] 0 48400 50900 180.555557 text
grestore
48199 50900 48250 51000 10 line
47900 50900 47900 50650 10 line
newpath
47500 51000
25
0 360 arc
fill
newpath
47500 51000
25
0 360 arc
fill
grestore
gsave
false true false true 260.000000 [(R5) ] 0 47800 50700 180.555557 text
grestore
gsave
false false false false 260.000000 [(100k) ] 0 47000 50600 180.555557 text
grestore
47900 50500 47500 50500 10 line
47200 48500 46900 48500 10 line
gsave
false false false false 260.000000 [(10u) ] 0 40200 51200 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 41700 47300 180.555557 text
grestore
gsave
false false false false 260.000000 [(2) ] 0 47500 51500 180.555557 text
grestore
newpath
40700 51900
25
0 360 arc
fill
newpath
42300 51900
25
0 360 arc
fill
newpath
41500 51000
25
0 360 arc
fill
newpath
41500 51000
25
0 360 arc
fill
newpath
41500 51000
25
0 360 arc
fill
newpath
41500 51000
25
0 360 arc
fill
newpath
41500 51000
25
0 360 arc
fill
newpath
41500 51000
25
0 360 arc
fill
newpath
41300 46700
25
0 360 arc
fill
newpath
41300 46700
25
0 360 arc
fill
newpath
41300 46700
25
0 360 arc
fill
newpath
42700 47700
25
0 360 arc
fill
newpath
42700 47700
25
0 360 arc
fill
newpath
45500 47700
25
0 360 arc
fill
newpath
47200 46300
25
0 360 arc
fill
newpath
47200 46300
25
0 360 arc
fill
newpath
47200 47700
25
0 360 arc
fill
newpath
47200 46300
25
0 360 arc
fill
newpath
48200 47900
25
0 360 arc
fill
newpath
48200 46300
25
0 360 arc
fill
newpath
48200 46300
25
0 360 arc
fill
newpath
48200 46300
25
0 360 arc
fill
newpath
48200 47900
25
0 360 arc
fill
newpath
53200 49800
25
0 360 arc
fill
newpath
53200 49000
25
0 360 arc
fill
newpath
53200 49000
25
0 360 arc
fill
newpath
54200 50000
25
0 360 arc
fill
newpath
45500 47700
25
0 360 arc
fill
newpath
45500 47700
25
0 360 arc
fill
newpath
48500 51900
25
0 360 arc
fill
newpath
47500 51700
25
0 360 arc
fill
newpath
47500 51000
25
0 360 arc
fill
newpath
48500 51900
25
0 360 arc
fill
newpath
54200 50000
25
0 360 arc
fill
newpath
47500 51000
25
0 360 arc
fill
newpath
47500 51000
25
0 360 arc
fill
showpage
%%End
